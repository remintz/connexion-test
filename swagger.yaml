swagger: '2.0'
info:
  title: Smartlocker API
  version: "0.1"
consumes:
  - application/json
produces:
  - application/json
paths:
  /sessions:
    post:
      operationId: api.sessions.create
      tags:
        - Session
      summary: >-
        Creates a new session. If other session exists for the same user, delete
        it
      parameters:
        - name: email
          description: user e-mail
          in: header
          type: string
          required: true
        - name: password
          description: user password
          in: header
          type: string
          format: password
          required: true
      responses:
        '200':
          description: Session created
          schema:
            type: array
            items:
              $ref: '#/definitions/Session'
        '400':
          description: Invalid user or password

  /lockersets:
    get:
      operationId: api.lockersets.list
      tags:
        - Lockersets
      summary: Fetch lockersets
      parameters:
        - name: token
          description: authentication token
          in: header
          type: string
          required: true
        - name: code
          description: the lockerset code
          in: query
          type: string
          pattern: '^[a-zA-Z0-9]*$'
          required: false
      responses:
        '200':
          description: List of lockersets
          schema:
            type: array
            items:
              $ref: '#/definitions/Lockerset'
        '401':
          description: Invalid token
    post:
      operationId: api.lockersets.create
      tags:
        - Lockersets
      summary: Create lockerset
      parameters:
        - name: token
          description: authentication token
          in: header
          type: string
          required: true
        - name: code
          description: the lockerset code
          in: header
          type: string
          pattern: '^[a-zA-Z0-9]*$'
          required: true
        - name: numBoxes
          description: number of boxes for this lockeset
          in: header
          type: integer
          required: true
      responses:
        '200':
          description: Lockerset created
          schema:
            type: array
            items:
              $ref: '#/definitions/Lockerset'
        '400':
          description: numBoxes value out of range
        '400':
          description: invalid code
        '401':
          description: Invalid token
        '409':
          description: Lockerset already exists

  /lockersets/{lockerset_code}:
    delete:
      operationId: api.lockersets.delete
      tags:
        - Lockersets
      summary: Remove a Lockerset
      parameters:
        - $ref: '#/parameters/lockerset_code'
        - name: token
          description: authentication token
          in: header
          type: string
      responses:
        '204':
          description: Lockerset was deleted
        '401':
          description: Invalid token
    get:
      operationId: api.lockersets.get
      tags:
        - Lockersets
      summary: Get a specific Lockerset
      parameters:
        - $ref: '#/parameters/lockerset_code'
        - name: token
          description: authentication token
          in: header
          type: string
      responses:
        '200':
          description: Lockerset Returned
          schema:
            type: array
            items:
              $ref: '#/definitions/Lockerset'
        '400':
          description: Lockerset code not found
        '401':
          description: Invalid token

  /lockerbox:
    get:
      operationId: api.lockerbox.list
      tags:
        - Lockersets
      summary: Returns a list of locker boxes according to the query performed
      parameters:
        - name: token
          description: authentication token
          in: header
          type: string
          required: true
        - name: lockersetCode
          description: the code for the lockerset being searched
          in: query
          type: string
          required: false
        - name: onlyAvailable
          description: if looking just for available boxes
          in: query
          type: boolean
          allowEmptyValue: true
          required: false
        - name: onlyOne
          description: >-
            if looking for just one value, for example, when selecting an
            available box for a user
          in: query
          type: boolean
          allowEmptyValue: true
          required: false
      responses:
        '200':
          description: List of boxes
          schema:
            type: array
            items:
              $ref: '#/definitions/LockerBox'
        '401':
          description: Invalid token
    put:
      operationId: api.lockerbox.put
      tags:
        - Lockersets
      summary: Changes the box status
      description: >-
        used to change the box status such as when opening the box, storing or
        retrieving an object
      parameters:
        - name: token
          description: authentication token
          in: header
          type: string
          required: true
        - name: lockerBoxCode
          in: query
          description: the code of the box
          type: string
          required: true
        - name: operation
          description: the command to be applied to the box
          in: query
          type: string
          enum:
            - Assign
            - Unassign
            - Block
            - Unblock
            - Open
          required: true
        - name: user
          description: the user id, required when operation=Assign
          in: query
          type: string
          required: false
        - name: key
          description: the key, required when command=Open
          in: query
          type: string
          required: false
      responses:
        '200':
          description: when operation=Assign returns the second key
          schema:
            $ref: '#/definitions/LockerBoxPutResponse'
        '401':
          description: Invalid token
  /users:
    get:
      operationId: api.users.list
      tags:
        - Users
      summary: Fetch users
      responses:
        '200':
          description: Fetch a list of users
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      parameters:
        - name: token
          description: authentication token
          in: header
          type: string
          required: true
        - name: email
          description: user e-mail
          in: query
          type: string
    post:
      operationId: api.users.create
      tags:
        - Users
      summary: Crate user
      description: Creates a user. The e-mail will be used as a login
      parameters:
        - name: token
          description: authentication token
          in: header
          type: string
          required: true
        - name: email
          description: user e-mail
          in: header
          type: string
          required: true
          pattern: '(?:[a-z0-9!#$%&''*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&''*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])'
        - name: password
          description: user password
          in: header
          type: string
          format: password
          required: true
      responses:
        '200':
          description: User created
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        '400':
          description: Invalid email
        '401':
          description: Invalid token
        '409':
          description: User already exists
  '/users/{email}':
    delete:
      operationId: api.users.delete
      tags:
        - Users
      summary: Remove a User
      parameters:
        - name: token
          description: authentication token
          in: header
          type: string
          required: true
        - $ref: '#/parameters/email'
      responses:
        '204':
          description: User was deleted
        '401':
          description: Invalid token
    get:
      operationId: api.users.get
      tags:
        - Users
      summary: Get a specific user
      parameters:
        - name: token
          description: authentication token
          in: header
          type: string
          required: true
        - $ref: '#/parameters/email'
      responses:
        '200':
          description: Return the user
          schema:
            $ref: '#/definitions/User'
        '401':
          description: Invalid token
        '404':
          description: User does not exist
      
parameters:
  lockerset_code:
    name: lockerset_code
    description: Lockerset's Unique identifier
    in: path
    type: string
    required: true
    pattern: '^[a-zA-Z0-9-]+$'
  email:
    name: email
    description: user's email address
    in: path
    type: string
    required: true
definitions:
  Lockerset:
    type: object
    properties:
      id:
        type: integer
        format: int64
      code:
        type: string
      numBoxes:
        type: integer
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      email:
        type: string
  Session:
    type: object
    properties:
      token:
        type: string
      email:
        type: string
      expiration:
        type: string
        format: date-time
  LockerBox:
    type: object
    properties:
      lockersetId:
        type: integer
        format: int64
      lockersetCode:
        type: string
      lockerBoxNumber:
        type: integer
  LockerBoxPutResponse:
    type: object
    properties:
      lockersetId:
        type: integer
        format: int64
      lockersetCode:
        type: string
      lockerBoxNumber:
        type: integer
        format: int16
      secondKey:
        type: string
  LockerBoxKey:
    type: object
    properties:
      key:
        type: string
      url:
        type: string
